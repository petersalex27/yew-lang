module prelude (
)

import (
  yewlang.ir
)

Context a = _internal Context
Contextualized a b = (in) a b

Addr a = struct (
  vr: ir.Register a
)
load: Addr a -> a
load addr = ir.load addr.vr
store: Addr a -> a -> Addr a
store addr x = 
  ir.store addr.vr x; 
  Addr (vr = addr.vr)

var: a -> Context a
var newvar x = Addr (vr = ir.newRegister x)

if {cond} {then} {else} = cond of 
  True -> then
  False -> else

-- ignores result of first argument;
-- this is useful for forcing an expression to evaluate
-- without needing to use the value of it
(;): a -> (b -> c)
_; f = f

for: Iterable f => (Contextualized (Contextualized (Addr a) (f a)) b) -> ()
-*
 * --param e: iteration variable
 * --param elems: iterable value
 * --param {} 
*-
for e in elems do action =
  if hasNext elems then                  -- check iterator
    let e', elems' = next elems in       -- iterate
    let action' = (\x -> action x) in    -- create thunk
    e = e';                              -- update state
    action e;                            -- force thunk
    for e in elems' do action'           -- tail recursive call
  else ()                                -- base case