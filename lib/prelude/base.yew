module prelude (
  __array__,
  if, for,
  Int, Uint, Char, String, Bool, Float
  (;)
)

Int = __int__
Float = __float__
Char = __char__
String = __string__
Uint = __int__
Bool = True | False

[a; n: Uint] = 
  []: [a; 0] | 
  (::) a [a; n]: [a; n+1] 

Branch a; (b: Bool) =
  then a: Branch a; True @delimit
  | else a: Branch a; False @delimit

if cond true false: Bool -> (Branch a; True) -> (Branch a; False) -> ((Branch a; True) | (Branch a; False))

if cond true false: cond -> (Branch a; cond) = cond when
  True -> then x
  Else 
if: Bool -> (Branch a; True) -> (Branch a; False) -> a
if cond true false 

@lazy
(&&) a b: Bool -> Bool -> Bool = 
  if a then b else False

@lazy
(||) a b: Bool -> Bool -> Bool = 
  if a then True else b

! a: Bool -> Bool = 
  if a then False else True

-- ignores result of first argument;
-- this is useful for forcing an expression to evaluate
-- without needing to use the value of it
(;): _ -> a -> a
(;) _ f = f

for: Iterable f => (@action (@context a (f a)) (a -> ()))
-*
 * --param e: iteration variable
 * --param elems: iterable value
 * --param {} 
*-
for e in elems do action =
  if hasNext elems then                  -- check iterator
    let e, elems' = next elems in        -- iterate
    let action' = (\x -> action x) in    -- create thunk
    e = e';                              -- update state
    action e;                            -- force thunk
    for e in elems' do action'           -- tail recursive call
  else ()                                -- base case