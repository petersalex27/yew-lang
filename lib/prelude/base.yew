module prelude (
  __array__,
  if, for,
  Int, Uint, Char, String, Bool, Float
  {;}
) where

Int = __int__
Float = __float__
Char = __char__
String = __string__
Uint = __int__
Bool = True | False



-*@Doc 
 * Array: an (@Code n)-element sequence of type (@Code a)
**-
[a; n: Uint] =
  []: [a; 0]
  | {::} a [a; n]: [a; n+1]


-*@Doc
* Ret
*-
if _ then _ else _: Bool -> a -> a -> a
if c then t else f = 
  match c in
    True -> t
    and False -> f


_ && _: Bool -> Bool -> Bool
a && b = if a then b else False

_ || _: Bool -> Bool -> Bool
a || b = if a then True else b

! : Bool -> Bool
! a = if a then False else True

-- ignores result of first argument;
-- this is useful for forcing an expression to evaluate
-- without needing to use the value of it
_; _: a -> b -> b
_; f = f

-- let captures all things on the next tokens indentation line
let
x = 3
y = 5

-- also okay
let
  x = 3
  y = 5

-- also okay
  let
x = 3
y = 4

-- okay, continue based on token following 'in'
let x = 3 in
let x = 4 ..

-- okay, continue based on token following 'in'
match x in 
  Thing -> ..

-- okay, continue based on token following 'match'
match
x ..

module main
where