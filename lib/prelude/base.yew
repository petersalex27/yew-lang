module prelude (
  __array__,
  if, for,
  Int, Uint, Char, String, Bool, Float
  (;)
)

import (
  yewlang.ir
)

Int = __int__

Float = __float__

Char = __char__

String = __string__

Uint = __int__

Bool = True | False

if {cond} {then} {else} = cond of 
  True -> then
  False -> else

-- ignores result of first argument;
-- this is useful for forcing an expression to evaluate
-- without needing to use the value of it
(;): _ -> a -> a
(;) _ f = f

for: Iterable f => (@action (@context a (f a)) (a -> ()))
-*
 * --param e: iteration variable
 * --param elems: iterable value
 * --param {} 
*-
for e in elems do action =
  if hasNext elems then                  -- check iterator
    let e, elems' = next elems in        -- iterate
    let action' = (\x -> action x) in    -- create thunk
    e = e';                              -- update state
    action e;                            -- force thunk
    for e in elems' do action'           -- tail recursive call
  else ()                                -- base case