moduleHead    ::= INDENT 'module' ID
exportHead    ::= moduleHead '('
                  | export ','
export        ::= exportHead ID
                  | exportHead TYPE_ID
                  | exportHead SYMBOL
                  | exportHead INFIXED
                  | exportHead          # only when L.A. is ')'
module        ::= moduleHead
                  | export ')'
source        ::= module 'where' definitions
                  | module
definitions   ::= INDENT function
                  | INDENT functionDef
                  | INDENT function definitions
                  | INDENT functionDef definitions
literal       ::= INT_VALUE 
                  | CHAR_VALUE 
                  | STRING_VALUE 
                  | FLOAT_VALUE
                  | literalArray
val           ::= literal
                  | array
arrayValHead  ::= '[' expr
                  | arrayValHead ',' expr
                  | litArrHead ',' expr
array         ::= arrayValHead ',' ']'
                  | arrayValHead ']'
litArrHead    ::= '[' literal
                  | litArrHead ',' literal
literalArray  ::= literalArray ',' ']'
                  | literalArray ']'
name          ::= ID
                  | TYPE_ID
funcName      ::= SYMBOL 
                  | INFIXED
                  | ID
param         ::= ID
                  | THUNKED
constructor   ::= TYPE_ID
                  | typeDecl
                  | constructor name
                  | constructor constructor
                  | '(' constructor ')'
expr          ::= val
                  | data
                  | funcName
                  | letExpr
                  | application
                  | pattern
                  | whereExpr
                  | judgement
                  | '(' expr ')'
application   ::= expr expr
patternMatch  ::= expr 'when' case
case          ::= case data '->' expr
                  | data '->' expr
letExpr        ::= 'let' function 'in' expr
whereExpr     ::= expr 'where' function
pattern       ::= constructor
                  | literal
                  | funcName
                  | pattern pattern
									| '(' pattern ')'
data          ::= pattern
                  | data expr
                  | '(' data ')'
judgement     ::= expr ':' type
                  | '(' judgement ')'
(INDENT) functionDecl ::= INDENT funcName
functionHead  ::= functionDecl pattern
                  | functionDecl                # only when L.A. is '=' or ':'
functionDef   ::= functionHead ':' type
									| functionHead      					# only when L.A. is '='
function      ::= functionDef '=' expr
typeDecl      ::= TYPE_ID
                  | typeDecl ID
typeDef       ::= typeDecl '=' constructor
                  | typeDef '|' constructor
type          ::= polytype 
                  | monotype 
                  | dependent
                  | '(' type ')'
polyHead      ::= 'forall' ID
                  | polyHead ID
polyBinders   ::= polyHead                        # when l.a. is '.'
                  | '(' polyBinders ')'           #   //
polytype      ::= polyBinders '.' dependentTyped
dependentHead ::= 'mapall' varJudgement
                  | dependentHead varJudgement
dependBinders ::= dependentHead                   # when l.a. is '.'
                  | '(' dependBinders ')'         #   //
dependent     ::= dependBinders '.' monotype
dependInst    ::= arrayHead ']'
arrayHead     ::= '[' monotype
                  | '[' monotype ';' expr
appType       ::= monotype monotype
                  | namedApp
monotype      ::= monotype '->' monotype
                 | '(' monotype ')'
                 | TYPE_ID
                 | monotype monotype
                 | '(' monotype tupleType
tupleType     ::= ',' monotype ')'
                 | ',' monotype tupleType
varJudgement  ::= ID ':' monotype
                  | '(' varJudgement ')'
